AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  simple-websockets-chat-app

  SAM Template for simple-websockets-chat-app that has the DynamoDB table and Lambda
  functions needed to demonstrate the Websocket protocol on API Gateway.

Parameters:
  TableName:
    Type: String
    Default: 'tournament_connections'
    Description: (Required) The name of the new DynamoDB to store connection identifiers for each connected clients. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'

  TournamentTableName:
    Type: String
    Default: 'tournament'
    Description: (Required) The name of the new DynamoDB to store connection identifiers for each connected clients. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'

  ScoreTableName:
    Type: String
    Default: 'score'
    Description: (Required) The name of the new DynamoDB to store connection identifiers for each connected clients. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'  

Resources:
  TournamentWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: TournamentWebSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref TournamentWebSocket
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectInteg
  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref TournamentWebSocket
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref TournamentWebSocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectInteg
  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref TournamentWebSocket
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations
  SendRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref TournamentWebSocket
      RouteKey: sendmessage
      AuthorizationType: NONE
      OperationName: SendRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref SendInteg
  SendInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref TournamentWebSocket
      Description: Send Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - ConnectRoute
    - SendRoute
    - DisconnectRoute
    Properties:
      ApiId: !Ref TournamentWebSocket
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref TournamentWebSocket
  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: "connectionId"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "connectionId"
        KeyType: "HASH"
      BillingMode: "PAY_PER_REQUEST"
      SSESpecification:
        SSEEnabled: True
      TableName: !Ref TableName

  TournamenTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: "tournamentId"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "tournamentId"
        KeyType: "HASH"
      BillingMode: "PAY_PER_REQUEST"
      SSESpecification:
        SSEEnabled: True
      TableName: !Ref TournamentTableName

  ScoreTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: "tournamentId"
        AttributeType: "S" 
      - AttributeName: "userId"
        AttributeType: "S"
      - AttributeName: "score"
        AttributeType: "N" 
      KeySchema:
      - AttributeName: "tournamentId"
        KeyType: "HASH"
      - AttributeName: "userId"
        KeyType: "RANGE"  
      BillingMode: "PAY_PER_REQUEST"
      SSESpecification:
        SSEEnabled: True
      TableName: !Ref ScoreTableName
      GlobalSecondaryIndexes:
      - IndexName: score-index
        KeySchema:
          - AttributeName: tournamentId
            KeyType: HASH    
          - AttributeName: score
            KeyType: RANGE
        Projection:
            NonKeyAttributes:
              - userId
            ProjectionType: INCLUDE     
  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: onconnect/
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs16.x
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TableName

  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - TournamentWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnectFunction
      Principal: apigateway.amazonaws.com

  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ondisconnect/
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs16.x
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TableName

  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - TournamentWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com

  SendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: sendmessage/
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs16.x
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TableName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TournamentWebSocket}/*'


  SendMessagePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - TournamentWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SendMessageFunction
      Principal: apigateway.amazonaws.com

  CreateTournament:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: createTournament/
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs16.x
      Environment:
        Variables:
          TABLE_NAME: !Ref TournamentTableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TournamentTableName
      Events:
        Api:
          Type: Api
          Properties:
            Path: /create
            Method: POST

  PlayTournament:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: playTournament/
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs16.x
      Environment:
        Variables:
          TABLE_NAME: !Ref ScoreTableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TournamentTableName
      Events:
        Api:
          Type: Api
          Properties:
            Path: /play
            Method: POST

  GetTournaments:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: getTournament/
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs16.x
      Environment:
        Variables:
          TABLE_NAME: !Ref TournamentTableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TournamentTableName
      Events:
        Api:
          Type: Api
          Properties:
            Path: /tournaments
            Method: POST         

  EnterLobby:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: enterLobby/
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs16.x
      Environment:
        Variables:
          TABLE_NAME: !Ref TournamentTableName
          SCORE_TABLE_NAME: !Ref ScoreTableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TournamentTableName
      Events:
        Api:
          Type: Api
          Properties:
            Path: /tournament/enter
            Method: POST                 
  ExitLobby:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: enterLobby/
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs16.x
      Environment:
        Variables:
          TABLE_NAME: !Ref TournamentTableName
          SCORE_TABLE_NAME: !Ref ScoreTableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TournamentTableName
      Events:
        Api:
          Type: Api
          Properties:
            Path: /tournament/exit
            Method: POST  

  GetLeaderBoard:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: getLeaderBoard/
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs16.x
      Environment:
        Variables:
          TABLE_NAME: !Ref TournamentTableName
          SCORE_TABLE_NAME: !Ref ScoreTableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TournamentTableName
      Events:
        Api:
          Type: Api
          Properties:
            Path: /tournament/leaderBoard
            Method: Get                         
Outputs:
  ConnectionsTableArn:
    Description: "Connections table ARN"
    Value: !GetAtt ConnectionsTable.Arn

  OnConnectFunctionArn:
    Description: "OnConnect function ARN"
    Value: !GetAtt OnConnectFunction.Arn

  OnDisconnectFunctionArn:
    Description: "OnDisconnect function ARN"
    Value: !GetAtt OnDisconnectFunction.Arn

  SendMessageFunctionArn:
    Description: "SendMessage function ARN"
    Value: !GetAtt SendMessageFunction.Arn

  WebSocketURI:
    Description: "The WSS Protocol URI to connect to"
    Value: !Join [ '', [ 'wss://', !Ref TournamentWebSocket, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/',!Ref 'Stage'] ]